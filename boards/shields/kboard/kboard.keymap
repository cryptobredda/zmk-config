/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // Default Layer (Layer 0)

            bindings = <
&kp ESC    &mt F1 N1  &mt F2 N2  &mt F3 N3  &mt F4 N4          &mt F5 N5                                  &mt F6 N6         &mt F7 N7          &mt F8 N8           &mt F9 N9            &mt F10 N0  &kp BSPC
&kp TAB    &kp Q      &kp W      &kp E      &kp R              &kp T                                      &kp Y             &kp U              &kp I               &kp O                &kp P      &kp DEL
&kp LCTRL  &kp A      &kp S      &kp D      &kp F              &kp G                                      &mt H LEFT_BRACE  &mt J RIGHT_BRACE  &mt K LEFT_BRACKET  &mt L RIGHT_BRACKET  &kp SEMI   &kp SQT
&kp LSHFT  &kp Z      &kp X      &kp C      &kp V              &kp B                                      &kp N             &kp M              &kp COMMA           &kp DOT              &kp FSLH   &kp RSHFT
                                            &mt LEFT_ALT LGUI  &mo 1      &kp SPACE  &mt ENTER BACKSPACE  &mo 1             &kp RALT
            >;
        };

        layer_select_layer {
            // Layer Select Layer (Layer 1)

            bindings = <
&trans  &trans          &trans        &trans          &trans           &trans                  &trans  &trans          &trans        &trans          &trans           &trans
&trans  &tog 2          &tog 3        &tog 4          &tog 5           &tog 6                  &tog 6  &tog 5          &tog 4        &tog 3          &tog 2           &trans
&trans  &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans                  &trans  &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&trans  &kp K_UNDO      &kp K_COPY    &kp K_PASTE     &kp K_REDO       &trans                  &trans  &kp K_UNDO      &kp K_COPY      &kp K_PASTE   &kp K_REDO      &trans
                                                      &trans           &trans  &trans  &trans  &trans  &trans
            >;
        };

        numpad_layer {
            // Numpad Layer (Layer 2)

            bindings = <
&tog 0  &kp KP_MULTIPLY  &kp N7   &kp N8  &kp N9   &trans                     &none      &kp N7   &kp N8  &kp N9   &kp KP_MULTIPLY  &tog 0
&trans  &kp KP_DIVIDE    &kp N4   &kp N5  &kp N6   &trans                     &trans     &kp N4   &kp N5  &kp N6   &kp KP_DIVIDE    &trans
&trans  &kp KP_SUBTRACT  &kp N1   &kp N2  &kp N3   &trans                     &trans     &kp N1   &kp N2  &kp N3   &kp KP_SUBTRACT  &trans
&trans  &kp KP_EQUAL     &kp DOT  &kp N0  &kp DOT  &kp ENTER                  &kp ENTER  &kp DOT  &kp N0  &kp DOT  &kp KP_EQUAL     &trans
                                          &trans   &mo 1      &tog 0  &tog 0  &mo 1      &trans
            >;
        };

        media_layer {
            // Media Layer (Layer 3)

            bindings = <
&trans  &trans      &trans            &trans      &trans        &trans                      &trans      &trans        &trans      &trans            &trans      &trans
&trans  &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT  &kp C_VOL_UP  &kp C_MUTE                  &kp C_MUTE  &kp C_VOL_UP  &kp C_NEXT  &kp C_PLAY_PAUSE  &kp C_PREV  &trans
&trans  &trans      &trans            &trans      &kp C_VOL_DN  &trans                      &trans      &kp C_VOL_DN  &trans      &trans            &trans      &trans
&trans  &trans      &trans            &trans      &trans        &trans                      &trans      &trans        &trans      &trans            &trans      &trans
                                                  &trans        &mo 1       &tog 0  &tog 0  &mo 1       &trans
            >;
        };

        symbol_layer {
            // Symbol Layer (Layer 4)

            bindings = <
&tog 0  &kp EXCL   &kp AT     &kp HASH   &kp DOLLAR  &kp PERCENT                   &kp CARET  &kp AMPS        &kp ASTRK         &kp LPAR   &kp RPAR   &tog 0
&trans  &kp TILDE  &kp GRAVE  &kp PIPE   &kp BSLH    &kp UNDER                     &kp PLUS   &kp LEFT_BRACE  &kp RIGHT_BRACE   &kp LBKT   &kp RBKT   &trans
&trans  &kp SQT    &kp DQT    &kp COLON  &kp SEMI    &kp QUESTION                  &kp FSLH   &kp LESS_THAN   &kp GREATER_THAN  &kp EQUAL  &kp MINUS  &trans
&trans  &trans     &trans     &trans     &trans      &trans                        &trans     &trans          &trans            &trans     &trans     &trans
                                         &trans      &mo 1         &tog 0  &tog 0  &mo 1      &trans
            >;
        };

        function_layer {
            // Function Layer (Layer 5)

            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6                  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans   &trans   &trans
                                &trans  &mo 1   &tog 0  &tog 0  &mo 1   &trans
            >;
        };

        bt_device_switcher {
            // BT Device Switcher Layer (Layer 6)

            bindings = <
&tog 0  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3                  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 3  &tog 0
&trans  &trans      &trans        &trans        &trans        &trans                        &trans        &trans        &trans        &trans        &trans        &trans
&trans  &trans      &trans        &trans        &trans        &trans                        &trans        &trans        &trans        &trans        &trans        &trans
&trans  &trans      &trans        &trans        &trans        &trans                        &trans        &trans        &trans        &trans        &trans        &trans
                                                &trans        &mo 1         &tog 0  &tog 0  &mo 1         &trans
            >;
        };
    };
};

